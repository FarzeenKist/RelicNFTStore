{"version":3,"sources":["components/Cover.js","components/ui/Notifications.js","utils/index.js","utils/constants.js","components/ui/Identicon.js","components/wallet/index.js","hooks/useMinterContract.js","hooks/useContract.js","utils/minter.js","components/minter/nfts/Add.js","components/minter/nfts/Card.js","components/ui/Loader.js","components/minter/nfts/index.js","App.js","hooks/useBalance.js","reportWebVitals.js","index.js"],"names":["myStyle","backgroundImage","height","marginTop","fontSize","backgroundSize","backgroundPosition","backgroundRepeat","opacity","Cover","connect","className","style","maxWidth","Button","onClick","catch","e","console","log","variant","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","truncateAddress","address","slice","length","formatBigNumber","num","shiftedBy","toFixed","Identicon","size","rest","ref","useRef","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","width","Wallet","amount","symbol","destroy","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","useMinterContract","abi","contractAddress","useContractKit","getConnectedKit","useState","contract","setContract","getContract","useCallback","a","kit","web3","eth","Contract","useContract","RelicNFTStoreAbi","RelicNFTStoreContractAddress","RelicNFTStore","client","ipfsHttpClient","createNft","minterContract","performActions","name","price","description","year","ipfsImage","ownerAddress","defaultAccount","data","JSON","stringify","image","owner","add","added","url","path","_price","ethers","utils","parseUnits","String","methods","safeMint","send","from","transaction","uploadToIpfs","file","files","progress","prog","getNfts","nfts","getImageLength","call","nftsLength","i","nft","Promise","resolve","getImage","tokenURI","res","fetchNftMeta","meta","fetchNftOwner","index","tokenId","sold","push","Number","all","ipfsUrl","axios","get","ownerOf","fetchNftContractOwner","transferOwnership","newAddress","makeTransfer","error","buyImage","value","sellImage","AddNfts","save","setName","setIpfsImage","setDescription","setYear","setPrice","show","setShow","handleClose","type","margin","marginBotton","Modal","onHide","centered","Header","closeButton","Title","Body","Form","FloatingLabel","controlId","label","Control","placeholder","onChange","imageUrl","alert","Footer","disabled","NftCard","contractOwner","buyNft","sellNft","sendAddrss","setSendAddrss","Col","Card","Badge","bg","src","alt","objectFit","Text","handleSend","Loader","role","NftList","setNfts","loading","setLoading","setNftOwner","addNft","toast","getAssets","sendNft","fetchContractOwner","_address","allNfts","background","color","textAlign","padding","borderRadius","Add","Row","xs","sm","lg","map","_nft","App","balance","setBalance","getBalance","getTotalBalance","useBalance","Container","fluid","Nav","CELO","updateBalance","coverDescription","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","networks","Alfajores","network","NetworkNames","rpcUrl","graphQl","explorer","chainId","dapp","document","getElementById"],"mappings":"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","file":"static/js/main.02aaeccc.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst myStyle={\n  backgroundImage: \n  \"url('https://i.ibb.co/wNS7kBy/relic-store.png')\",\n  height:'100vh',\n  marginTop:'0px',\n  fontSize:'18px',\n  backgroundSize: 'cover',\n  backgroundPosition: 'center',\n  backgroundRepeat: 'no-repeat',\n  opacity: 1\n\n};\nconst Cover = ({ connect }) => {\n    return (\n      <div\n          className=\"text-center \"\n          style={myStyle}\n        >\n          <div className=\"mt-auto text-light mb-0 \">\n            <div\n              className=\" ratio ratio-1x1 mx-auto mb-2\"\n              style={{ maxWidth: \"320px\" }}\n            >\n            </div>\n            \n  \n            <p className='text-info fw-bold' style={{marginTop:170}}>Please connect your wallet to continue.</p>\n            <Button\n              onClick={() => connect().catch((e) => console.log(e))}\n              variant=\"btn btn-outline-light\"\n              className=\"rounded-pill px-3 mt-0 mb-0\"\n            >\n              Connect Wallet\n            </Button>\n          </div>\n\n        </div>\n    );\n  \n\n  return null;\n};\n\n\n\nexport default Cover;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport {ToastContainer} from 'react-toastify';\n\nconst Notification = () => (\n  <ToastContainer\n    position=\"bottom-center\"\n    autoClose={5000}\n    hideProgressBar\n    newestOnTop\n    closeOnClick\n    rtl={false}\n    pauseOnFocusLoss\n    draggable={false}\n    pauseOnHover\n  />\n);\n\nconst NotificationSuccess = ({ text }) => (\n  <div>\n    <i className=\"bi bi-check-circle-fill text-success mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst NotificationError = ({ text }) => (\n  <div>\n    <i className=\"bi bi-x-circle-fill text-danger mx-2\" />\n    <span className=\"text-secondary mx-1\">{text}</span>\n  </div>\n);\n\nconst Props = {\n  text: PropTypes.string,\n};\n\nconst DefaultProps = {\n  text: '',\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport { Notification, NotificationSuccess, NotificationError };\n","import {ERC20_DECIMALS} from \"./constants\";\n\n// format a wallet address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 4, address.length);\n}\n\n// convert from big number\nexport const formatBigNumber = (num) => {\n    if (!num) return\n    return num.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n}","const ERC20_DECIMALS = 18;\nexport { ERC20_DECIMALS };\n","import { useEffect, useRef } from \"react\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nexport default function Identicon({address, size, ...rest}) {\n  const ref = useRef();\n\n  useEffect(() => {\n    if (address && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(size, parseInt(address.slice(2, 10), 16)));\n    }\n  }, [address, size]);\n\n  return (\n    <div {...rest} >\n        <div ref={ref} style={{width:`${size}px`,height:`${size}px`}}  />\n    </div>\n  )\n}","import React from 'react';\nimport {Dropdown, Stack, Spinner} from 'react-bootstrap';\nimport {formatBigNumber, truncateAddress} from '../../utils';\nimport Identicon from '../ui/Identicon'\n\nconst Wallet = ({address, amount, symbol, destroy}) => {\n    if (address) {\n        return <>\n{/* Wallet Dropdown functionality */}\n    <Dropdown>\n        <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                            className=\"d-flex align-items-center border rounded-pill py-1\">\n            {amount ? (\n                <>{formatBigNumber(amount)} <span className=\"ms-1\"> {symbol}</span></>\n            ) : (<Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>)}\n            <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n        </Dropdown.Toggle>\n\n      <Dropdown.Menu className=\"shadow-lg border-0\" >\n        <Dropdown.Item href={`https://alfajores-blockscout.celo-testnet.org/address/${address}/transactions`}  target=\"_blank\">     \n            <Stack direction=\"horizontal\" gap={2}>\n                <i className=\"bi bi-person-circle fs-4\" />\n                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n            </Stack>\n        </Dropdown.Item>\n        <Dropdown.Divider/>\n          <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n              destroy()\n          }}>\n              <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n              Disconnect\n          </Dropdown.Item>\n      </Dropdown.Menu>\n    </Dropdown>\n    \n    </>\n  }\n\n  return null;\n};\n\nexport default Wallet;","import {useContract} from './useContract';\nimport RelicNFTStoreAbi from '../contracts/RelicStore.json';\nimport RelicNFTStoreContractAddress from '../contracts/RelicNFTStore-address.json';\n\n\n// export interface for NFT contract\nexport const useMinterContract = () => useContract(RelicNFTStoreAbi.abi, RelicNFTStoreContractAddress.RelicNFTStore);\n","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useContract = (abi, contractAddress) => {\n  const { getConnectedKit, address } = useContractKit();\n  const [contract, setContract] = useState(null);\n\n  const getContract = useCallback(async () => {\n    const kit = await getConnectedKit();\n\n    // get a contract interface to interact with\n    setContract(new kit.web3.eth.Contract(abi, contractAddress));\n  }, [getConnectedKit, abi, contractAddress]);\n\n  useEffect(() => {\n    if (address) getContract();\n  }, [address, getContract]);\n\n  return contract;\n};\n","import { create as ipfsHttpClient } from \"ipfs-http-client\";\nimport axios from \"axios\";\nimport { ethers } from \"ethers\";\n\n// initialize IPFS\nconst client = ipfsHttpClient(\"https://ipfs.infura.io:5001/api/v0\");\n\n// mint an NFT\nexport const createNft = async (\n  minterContract,\n  performActions,\n  { name,price, description, year, ipfsImage, ownerAddress }\n) => {\n  await performActions(async (kit) => {\n    if (!name || !description || !year|| !ipfsImage) return;\n    const { defaultAccount } = kit;\n\n    // convert NFT metadata to JSON format\n    const data = JSON.stringify({\n      name,\n      price,\n      description,\n      year,\n      image: ipfsImage,\n      owner: defaultAccount\n    });\n\n    try {\n      // save NFT metadata to IPFS\n      const added = await client.add(data);\n\n      // IPFS url for uploaded metadata\n      const url = `https://ipfs.infura.io/ipfs/${added.path}`;\n      const _price = ethers.utils.parseUnits(String(price), \"ether\");\n\n\n      // mint the NFT and save the IPFS url to the blockchain\n      let transaction = await minterContract.methods\n        .safeMint(url, _price)\n        .send({ from: defaultAccount });\n\n      return transaction;\n    } catch (error) {\n      console.log(\"Error uploading file: \", error);\n    }\n  });\n};\n\n// function to upload a file to IPFS\nexport const uploadToIpfs = async (e) => {\n  const file = e.target.files[0];\n  if (!file) return;\n  try {\n    const added = await client.add(file, {\n      progress: (prog) => console.log(`received: ${prog}`),\n    });\n    return `https://ipfs.infura.io/ipfs/${added.path}`;\n  } catch (error) {\n    console.log(\"Error uploading file: \", error);\n  }\n};\n\n// fetch all NFTs on the smart contract\nexport const getNfts = async (minterContract) => {\n  try {\n    const nfts = [];\n    const nftsLength = await minterContract.methods.getImageLength().call();\n    for (let i = 0; i < Number(nftsLength); i++) {\n      const nft = new Promise(async (resolve) => {\n        const image = await minterContract.methods.getImage(i).call();\n        const res = await minterContract.methods.tokenURI(i).call();\n        const meta = await fetchNftMeta(res);\n        const owner = await fetchNftOwner(minterContract, i);\n        resolve({\n          index: i,\n          tokenId: i,\n          owner,\n          price: image.price,\n          sold: image.sold,\n          name: meta.data.name,\n          image: meta.data.image,\n          description: meta.data.description,\n          year:meta.data.description        });\n      });\n      nfts.push(nft);\n    }\n    return Promise.all(nfts);\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the metedata for an NFT from IPFS\nexport const fetchNftMeta = async (ipfsUrl) => {\n  try {\n    if (!ipfsUrl) return null;\n    const meta = await axios.get(ipfsUrl);\n    return meta;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the owner address of an NFT\nexport const fetchNftOwner = async (minterContract, index) => {\n  try {\n    return await minterContract.methods.ownerOf(index).call();\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\n// get the address that deployed the NFT contract\nexport const fetchNftContractOwner = async (minterContract) => {\n  try {\n    let owner = await minterContract.methods.owner().call();\n    return owner;\n  } catch (e) {\n    console.log({ e });\n  }\n};\n\nexport const transferOwnership = async (\n  minterContract,\n  ownerAddress,\n  newAddress,\n  tokenId,\n  performActions\n) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      // console.log(ownerAddress, newAddress, tokenId, defaultAccount);\n      await minterContract.methods\n        .makeTransfer(ownerAddress, newAddress, tokenId)\n        .send({ from: defaultAccount });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\nexport const buyImage = async (\n  minterContract,\n  index,\n  tokenId,\n  performActions\n) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      // console.log(ownerAddress, newAddress, tokenId, defaultAccount);\n      const image = await minterContract.methods.getImage(index).call();\n      await minterContract.methods\n        .buyImage(tokenId)\n        .send({ from: defaultAccount, value: image.price });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\nexport const sellImage = async (minterContract, tokenId, performActions) => {\n  try {\n    await performActions(async (kit) => {\n      const { defaultAccount } = kit;\n      await minterContract.methods\n        .sellImage(tokenId)\n        .send({ from: defaultAccount });\n    });\n  } catch (error) {\n    console.log({ error });\n  }\n};\nexport const getOwners = async (minterContract) => {\n  try {\n    const ownerCount = await minterContract.methods.getOwners().call();\n    return ownerCount;\n  } catch (error) {\n    console.log({ error });\n  }\n};\n","/* eslint-disable react/jsx-filename-extension */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Modal, Form, FloatingLabel } from \"react-bootstrap\";\nimport { uploadToIpfs } from \"../../../utils/minter\";\n\n\nconst AddNfts = ({ save, address }) => {\n  const [name, setName] = useState(\"\");\n  const [ipfsImage, setIpfsImage] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [year, setYear] = useState(\"\");\n\n  const [price, setPrice] = useState(\"\")\n\n\n  const [show, setShow] = useState(false);\n\n\n  // check if all form data has been filled\n  const isFormFilled = () =>{\n   return name && ipfsImage && description;\n  }\n      \n\n  // close the popup modal\n  const handleClose = () => {\n    setShow(false);\n    // setAttributes([]);\n  };\n\n  // display the popup modal\n  const handleShow = () => setShow(true);\n\n  return (\n    <>\n      <Button type=\"button\" variant=\"outline-dark\" style={{margin:20, marginBotton: 10}}\n        onClick={handleShow}>Add Relic Item NFT</Button>\n      {/* Modal */}\n      <Modal show={show} onHide={handleClose} centered>\n        <Modal.Header closeButton>\n          <Modal.Title>Create NFT</Modal.Title>\n        </Modal.Header>\n\n        <Modal.Body>\n          <Form>\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Name\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Name\"\n                onChange={(e) => {\n                  setName(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputDescription\"\n              label=\"Description\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"description\"\n                style={{ height: \"80px\" }}\n                onChange={(e) => {\n                  setDescription(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n            <FloatingLabel\n              controlId=\"inputYear\"\n              label=\"Year\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                as=\"textarea\"\n                placeholder=\"year\"\n                onChange={(e) => {\n                  setYear(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <FloatingLabel\n              controlId=\"inputLocation\"\n              label=\"Price\"\n              className=\"mb-3\"\n            >\n              <Form.Control\n                type=\"text\"\n                placeholder=\"Price of NFT\"\n                onChange={(e) => {\n                  setPrice(e.target.value);\n                }}\n              />\n            </FloatingLabel>\n\n            <Form.Control\n              type=\"file\"\n              className={\"mb-3\"}\n              onChange={async (e) => {\n                const imageUrl = await uploadToIpfs(e);\n                if (!imageUrl) {\n                  alert(\"failed to upload image\");\n                  return;\n                }\n                setIpfsImage(imageUrl);\n              }}\n              placeholder=\"Product name\"\n            ></Form.Control>\n          </Form>\n        </Modal.Body>\n\n        <Modal.Footer>\n          <Button variant=\"outline-secondary\" onClick={handleClose}>\n            Close\n          </Button>\n          <Button\n            variant=\"dark\"\n            disabled={!isFormFilled()}\n            onClick={() => {\n              save({\n                name,\n                price,\n                ipfsImage,\n                description,\n                year,\n                ownerAddress: address\n              });\n              handleClose();\n            }}\n            >\n            Create NFT\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    </>\n  );\n};\n\nAddNfts.propTypes = {\n\n  // props passed into this component\n  save: PropTypes.func.isRequired,\n  address: PropTypes.string.isRequired,\n};\n\nexport default AddNfts;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Card, Col, Badge, Stack, Row } from \"react-bootstrap\";\nimport { truncateAddress } from \"../../../utils\";\nimport { Form, Button } from \"react-bootstrap\";\nimport Identicon from \"../../ui/Identicon\";\n// NFT Cards Functionality\nconst NftCard = ({ nft, send, contractOwner, buyNft, sellNft }) => {\n  const { image, description, owner, name, index, price,sold } = nft;\n\n  const handleSend = (index, owner) => {\n    if (!sendAddrss) return;\n    send(sendAddrss, index, owner);\n  };\n  const [sendAddrss, setSendAddrss] = useState(\"\");\n  {\n    console.log(sold);\n  }\n  return (\n    <Col key={index}>\n      <Card className=\"h-100 bg-dark text-light\">\n        <Card.Header>\n          <Stack direction=\"horizontal\" gap={2}>\n            <Identicon address={owner} size={28} />\n            <span className=\"font-monospace text-secondary\">\n              {truncateAddress(owner)}\n            </span>\n            <Badge bg=\"secondary\" className=\"ms-auto\">\n              {price / 10 ** 18} CELO\n            </Badge>\n          </Stack>\n        </Card.Header>\n\n        <div className=\" ratio ratio-4x3\">\n          <img src={image} alt={description} style={{ objectFit: \"cover\" }} />\n        </div>\n\n        <Card.Body className=\"d-flex  flex-column text-center\">\n          <Card.Title>{name}</Card.Title>\n          <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n          <div>\n          \n          </div>\n          {contractOwner === owner && (\n            <>\n              <Form.Control\n                className={\"pt-2\"}\n                type=\"text\"\n                placeholder=\"Send Address\"\n                onChange={(e) => {\n                  setSendAddrss(e.target.value);\n                }}\n              />\n              <Button\n                variant=\"secondary\"\n                onClick={() => handleSend(index, owner)}\n              >\n                Send\n              </Button>\n            </>\n              )}\n\n            {!sold ? (\n              <Button variant=\"secondary\" onClick={buyNft}>\n                Buy\n              </Button>\n            ) : contractOwner === owner ? (\n              <Button variant=\"danger\" onClick={sellNft}>\n                Sell\n              </Button>\n            ) : (\n              <Button variant=\"danger\" disabled>\n              Sold\n              </Button>\n          )}\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nNftCard.propTypes = {\n  // props passed into this component\n  nft: PropTypes.instanceOf(Object).isRequired,\n};\n\nexport default NftCard;\n","import React from 'react';\nimport { Spinner} from \"react-bootstrap\";\nconst Loader = () => (\n \n \n  <div className=\"d-flex justify-content-center\">\n    <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n      <span className=\"visually-hidden\">Loading...</span>\n    </Spinner>\n  </div>\n\n);\nexport default Loader;\n","import { useContractKit } from \"@celo-tools/use-contractkit\";\nimport React, { useEffect, useState, useCallback } from \"react\";\nimport { toast } from \"react-toastify\";\nimport PropTypes from \"prop-types\";\nimport AddNfts from \"./Add\";\nimport Nft from \"./Card\";\nimport Loader from \"../../ui/Loader\";\nimport { NotificationSuccess, NotificationError } from \"../../ui/Notifications\";\nimport {\n  getNfts,\n  buyImage,\n  sellImage,\n  createNft,\n  fetchNftContractOwner,\n  transferOwnership\n} from \"../../../utils/minter\";\nimport { Row } from \"react-bootstrap\";\n\nconst NftList = ({ minterContract, name }) => {\n  const { performActions, address, kit } = useContractKit();\n  const [nfts, setNfts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [nftOwner, setNftOwner] = useState(null);\n  const  {defaultAccount} = kit;\n\n  const addNft = async (data) => {\n    try {\n      setLoading(true);\n\n      // create an nft functionality\n      await createNft(minterContract, performActions, data);\n      toast(<NotificationSuccess text=\"Updating NFT list....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to create an NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const buyNft = async (index, tokenId) => {\n    try {\n      setLoading(true);\n\n      // Create a buy NFT functionality\n      await buyImage(minterContract, index, tokenId, performActions);\n      getAssets();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sellNft = async (index) => {\n    try {\n      setLoading(true);\n      // Create a sell NFT functionality\n      await sellImage(minterContract, index, performActions);\n      getAssets();\n    } catch (error) {\n      console.log(error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const sendNft = async (address, tokenId, owner)=>{\n    try {\n      setLoading(true);\n      // Create a send/transfer NFT functionality\n      await transferOwnership(minterContract,owner, address, tokenId, performActions)\n      toast(<NotificationSuccess text=\"Updating Relic NFT Markeplace Store....\" />);\n      getAssets();\n    } catch (error) {\n      console.log({ error });\n      toast(<NotificationError text=\"Failed to send NFT.\" />);\n    } finally {\n      setLoading(false);\n    }\n  }\n\n  const fetchContractOwner = useCallback(async (minterContract) => {\n    // get the address that deployed the NFT contract\n    const _address = await fetchNftContractOwner(minterContract);\n    setNftOwner(_address);\n  }, []);\n\n  const getAssets = useCallback(async () => {\n    try {\n      setLoading(true);\n\n      // fetch all nfts from the smart contract\n      const allNfts = await getNfts(minterContract);\n      if (!allNfts) return;\n\n\n      setNfts(allNfts);\n    } catch (error) {\n      console.log({ error });\n    } finally {\n      setLoading(false);\n    }\n  }, [minterContract]);\n\n\n  useEffect(() => {\n    try {\n      if (address && minterContract) {\n        getAssets();\n        fetchContractOwner(minterContract);\n      }\n    } catch (error) {\n      console.log({ error });\n    }\n  }, [minterContract, address, getAssets, fetchContractOwner]);\n\n  if (address) {\n    return (\n      <>\n        {!loading ? (\n          <>\n            <div className=\"bg-dark text-light\" style={{'--color-1': 'deepskyblue','--color-2': 'navy',\n      background: `\n      linear-gradient(\n        170deg,\n        var(--color-1),\n        var(--color-2) 80%\n      )\n    `,\n\n    // Unrelated styles:\n    color: 'white',\n    textAlign: 'center',\n    padding: 30,\n    borderRadius: 12,\n  }}>\n              <h1 className=\"fs-4 fw-bold mb-2\">{name}</h1>\n\n            </div>\n            <div>\n            <AddNfts save={addNft} address={address} />\n            </div>\n            <Row xs={1} sm={2} lg={3} className=\"g-3  mb-5 g-xl-4 g-xxl-5 bg-dark mt-2 pb-4\">\n\n              {/* display all NFTs */}\n              {nfts.map((_nft) => (\n                <Nft\n                  key={_nft.index}\n                  contractOwner = {defaultAccount}\n                  buyNft={() => buyNft(_nft.index, _nft.tokenId)}\n                  sellNft={() => sellNft(_nft.tokenId)}\n                  send = {sendNft}\n                  nft={{\n                    ..._nft,\n                  }}\n                />\n              ))}\n            </Row>\n          </>\n        ) : (\n          <Loader />\n        )}\n      </>\n    );\n  }\n  return null;\n};\n\nNftList.propTypes = {\n  // props passed into this component\n  minterContract: PropTypes.instanceOf(Object),\n  updateBalance: PropTypes.func.isRequired,\n};\n\nNftList.defaultProps = {\n  minterContract: null,\n};\n\nexport default NftList;\n","import React from \"react\";\nimport Cover from \"./components/Cover\";\nimport { Notification } from \"./components/ui/Notifications\";\nimport Wallet from \"./components/wallet\";\nimport { useBalance, useMinterContract } from \"./hooks\";\n\nimport Nfts from \"./components/minter/nfts\";\nimport { useContractKit } from \"@celo-tools/use-contractkit\";\n\nimport \"./App.css\";\n\nimport { Container, Nav } from \"react-bootstrap\";\nconst myStyle={\n  height:'100vh',\n  marginTop:'0px',\n  fontSize:'18px',\n  backgroundSize: 'cover',\n  backgroundRepeat: 'no-repeat',\n  backgroundImage: `url(\"https://i.ibb.co/wNS7kBy/relic-store.png\")` \n};\nconst App = function AppWrapper() {\n  \n  const { address, destroy, connect } = useContractKit();\n\n  //  fetch user's celo balance using hook\n  const { balance, getBalance } = useBalance();\n\n  // initialize the NFT mint contract\n  const minterContract = useMinterContract();\n\n  return (\n    <>\n      <Notification />\n\n      {address ? (\n        <Container fluid=\"md\">\n          <Nav className=\"justify-content-end pt-3 pb-5\">\n            <Nav.Item>\n              {/*display user wallet*/}\n              <Wallet\n                address={address}\n                amount={balance.CELO}\n                symbol=\"CELO\"\n                destroy={destroy}\n              />\n            </Nav.Item>\n          </Nav>\n          <main style={{myStyle}}>\n            {/*list NFTs*/}\n            <Nfts className=\"bg-dark text-dark\"\n              name=\"Relic NFT Store\"\n              updateBalance={getBalance}\n              minterContract={minterContract}\n            />\n          </main>\n        </Container>\n      ) : (\n        <Cover name=\"Relic NFT Store\" coverDescription =\"An NFT Marketplace for ancient discovered items\" connect={connect} />\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useContractKit } from '@celo-tools/use-contractkit';\n\nexport const useBalance = () => {\n  const { address, kit } = useContractKit();\n  const [balance, setBalance] = useState(0);\n\n\n  const getBalance = useCallback(async () => {\n\n    // fetch a connected wallet token balance\n    const value = await kit.getTotalBalance(address);\n    setBalance(value);\n  }, [address, kit]);\n\n  useEffect(() => {\n    if (address) getBalance();\n  }, [address, getBalance]);\n\n  return {\n    balance,\n    getBalance,\n  };\n};\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  ContractKitProvider,\n  Alfajores,\n  NetworkNames,\n} from \"@celo-tools/use-contractkit\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap-icons/font/bootstrap-icons.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ContractKitProvider\n      networks={[Alfajores]}\n      network={{\n        name: NetworkNames.Alfajores,\n        rpcUrl: \"https://alfajores-forno.celo-testnet.org\",\n        graphQl: \"https://alfajores-blockscout.celo-testnet.org/graphiql\",\n        explorer: \"https://alfajores-blockscout.celo-testnet.org\",\n        chainId: 44787,\n      }}\n      dapp={{\n        name: \"Relic NFT Store\",\n        description: \"An NFT Marketplace for ancient items\",\n        url: \"https://dacade.org\",\n      }}\n    >\n      <App />\n    </ContractKitProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}